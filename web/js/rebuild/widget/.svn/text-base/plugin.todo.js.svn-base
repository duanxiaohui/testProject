define([	'rebuild/base/common',	"rebuild/widget/calendarPlugin"],	function(c){	$.calendarPlugin['todo'] = function(){		var $popup = $("#todo_plug");		if($popup.length == 0){			var html = '<div class="todo_plug ui-corner-all none" id="todo_plug"><div class="todo_plug_title"><a hidefocus="true" href="javascript:;" class="close_plug"></a><h3>待办事项</h3><a hidefocus="true" href="javascript:;" title="添加待办" class="add_todo_btn"></a></div><div class="todo_plug_content"><div class="todo_plug_list"><ul></ul></div></div></div>';			$('<div class="ui-widget-overlay cal_plugin_overlay" id="todo_plug_mask"></div>').appendTo('body');			$popup = $(html).appendTo('body');			$(window).on('resize', rePosition);		}		$popup.show('fade');		$("#todo_plug_mask").show("fade");		rePosition();		$popup.calendarPluginTodo();				function rePosition(){			var docEl = document.documentElement;			var docHeight = docEl.clientHeight;			var docWidth = docEl.clientWidth;			//resize height			$popup.height(docHeight - 20);			$popup.find('div.todo_plug_list').height(docHeight - 30 - $popup.find('div.todo_plug_title').outerHeight());			//resize width			//default width:800px			//default margin:60px			$popup.width(docWidth - 60 > 800 ? 800 : docWidth - 60);			$popup.position({				of: document.documentElement			});		}	};	$.widget('mxx.calendarPluginTodo', {		options: {},		_create: function(){			var self = this, $elem = $(this.element), opt = this.options;			self.$ulList = $elem.find('ul');			self.editHtml = '<li noteid="{id}" class="default e_clear{className}"><div class="cut_off_date"><input type="text" readonly="readonly" value="{deadline}"/></div><div class="todo_btn"><a hidefocus="true" href="javascript:;" class="todo_cancel_btn">取消</a><a hidefocus="true" href="javascript:;" class="todo_save_btn">保存</a></div><div class="todo_operating"><a hidefocus="true" href="javascript:;" class="todo_complete" title="{titlemark}"></a><a hidefocus="true" href="javascript:;" class="todo_del" title="删除"></a><a hidefocus="true" href="javascript:;" class="todo_edit" title="编辑"></a></div><a hidefocus="true" href="javascript:;" class="star{priority}"></a><div class="todo_text">{encodeTitle}</div><textarea class="edit_textarea" ori="{title}">{title}</textarea></li>';			$elem.draggable({				handle: 'div.todo_plug_title',				opacity: 0.65,				cancel: "a",				stop: function(evt, ui){					if (ui.offset.left < 0 || ui.offset.top < 0) {						$(this).css({							left: Math.max(0, ui.offset.left),							top: Math.max(0, ui.offset.top)						});					}				}			});			$elem.find('a.close_plug').click(function(evt){				evt.preventDefault();				$elem.hide('fade');				$('body > div.cal_plugin_overlay').hide('fade');			});			$('li', self.$ulList).live('click', function(){				var $li = $(this);				if (!$li.hasClass('todo_edit') && !$li.hasClass('todo_empty')) {					$li.toggleClass('click');				}			});			$('input,a', self.$ulList).live('click', function(evt){				this.nodeName == 'A' && evt.preventDefault();				evt.stopPropagation();			});			$elem.find('a.add_todo_btn').click(function(evt){				var currEditRow = self.$ulList.find('li.todo_edit');				if (currEditRow.size()) {					if (currEditRow.hasClass('create')) {						currEditRow.find('textarea').focus();					} else {						$.alert('请先保存或者取消当前正在编辑的待办事项！', {							buttons: {								'确定': function(){									$(this).dialog("close");									currEditRow.find('textarea').focus();								}							}						});					}				} else {					var $li = $($.format(self.editHtml, {						id: '',						title: '',						className: ' click todo_edit create',						deadline: '截止日期  不限',						priority: '',						titlemark: '标识为已完成'					})).prependTo(self.$ulList);					$li.find('textarea').focus();					$li.find('div.cut_off_date input').datepicker($.getDPOptions({						minDate: 0,						onSelect: function(dateText, inst){							inst.input.val('截止日期  ' + dateText);						}					}));				}			});			var starRequesting = false;			$('a.star', $elem).live('click', function(evt){				var $lnk = $(this), $li = $lnk.parents('li'), noteId = $li.attr('noteid');				if (!$li.hasClass('create')) {					if (!starRequesting) {						starRequesting = true;						var priority = !$lnk.hasClass('staron');						$lnk.toggleClass('staron');						self.post('/todo/updatePriority.do', {							noteId: parseInt(noteId),							priority: priority						}, function(result){							starRequesting = false;							self.sort();						}, '设置待办重要性');					}				} else {					$lnk.toggleClass('staron');				}			});			$('a.todo_cancel_btn', $elem).live('click', function(evt){				var $li = $(this).parents('li');				if ($li.hasClass('create')) {					$li.slideUp(function(){						$li.remove();					});				} else {					$li.removeClass('click todo_edit');				}			});			var saveRequesting = false;			$('a.todo_save_btn', $elem).live('click', function(evt){				var $li = $(this).parents('li'), $ta = $li.find('textarea.edit_textarea'), priority, content, deadlinestr;				content = $.trim($ta.val());				if (!content) {					$.alert('待办内容不能为空！', {						buttons: {							'确定': function(){								$(this).dialog("close");								$ta.focus();							}						}					});					return;				}				if (content.length > 1000) {					$.alert('待办内容最多1000个字，超出'+(content.length - 1000)+'个字！', {						buttons: {							'确定': function(){								$(this).dialog("close");								$ta.focus();							}						}					});					return;				}				if ($li.hasClass('create')) {					priority = $li.find('a.star').hasClass('staron');					deadline = $li.find('div.cut_off_date input').val().split('  ')[1];					deadline = /^\d{4}-\d{2}-\d{2}$/.test(deadline) ? deadline : 'NODEADLINE';					self.post('/todo/createv2.do', {						priority: priority,						content: content,						deadlinestr: deadline					}, function(noteid){						if (noteid > 0) {							$li.attr('noteid', noteid);							$li.removeClass('create');							$ta.attr('ori', content);							$li.find('div.todo_text').html(c.htmlEncode(content).replace(/\n/g,'<br/>'));							$('a.todo_cancel_btn', $li).click();							self.$ulList.find('li.todo_empty').remove();							self.sort();						}					}, '保存待办');				} else {					self.post('/todo/updateContent.do', {						noteId: parseInt($li.attr('noteid')),						content: content					}, function(result){						if (result) {							$li.removeClass('todo_edit');							$ta.attr('ori', content);							var contentTxt=content.replace(/\n/g,'<br/>');							$li.find('div.todo_text').html(contentTxt);							$('a.todo_cancel_btn', $li).click();							self.sort();						}					}, '保存待办');				}			});			$('a.todo_edit', $elem).live('click', function(evt){				var $lnk = $(this), $li = $lnk.parents('li'), noteId = $li.attr('noteid');				$li.addClass('click todo_edit');				$li.find('textarea.edit_textarea').focus().select();				var edittxt = $li.find('textarea.edit_textarea').val();				$li.find('textarea.edit_textarea').val(edittxt.replace(/<br\/>/g,'\n'));			});						$('a.todo_del', $elem).live('click', function(evt){				var $lnk = $(this), $li = $lnk.parents('li'), noteId = $li.attr('noteid');				$.confirm('确定要解除该条待办吗？', {					buttons: [{						click: function(){							var dialog = this;							self.post('/todo/delete.do', {								noteId: parseInt(noteId)							}, function(rslt){								if (rslt) {									$(dialog).dialog('close');									$li.slideUp(function(){										$li.remove();										if (!self.$ulList.find('li').size()) {											self.todoEmpty();										}									});								}							}, '删除待办');						}					}]				});			});			var completeRequesting = false;			$('a.todo_complete', $elem).live('click', function(evt){				var $lnk = $(this), $li = $lnk.parents('li'), noteId = $li.attr('noteid');				if (!completeRequesting) {					completeRequesting = true;					var state = !$li.hasClass('com');					$li.toggleClass('com');					self.post('/todo/updateState.do', {						noteId: parseInt(noteId),						state: +state					}, function(result){						completeRequesting = false;						$lnk.attr('title', state ? '标识为未完成': '标识为已完成')						self.sort();					}, '更新待办状态');				}			});			self.loadTodoData();		},		loadTodoData: function(){			var self = this, $elem = $(this.element), opt = this.options;			self.post('/todo/findAll.do', {}, function(result){				if (result.length) {					self.$ulList.empty().html($.format(self.editHtml, $.map(result.sort(sortOperator), function(o){						o.encodeTitle = c.htmlEncode(o.title);						o.className = o.state ? ' com' : '';						o.deadline = '截止日期  ' + (o.deadline ? c.formatDate(new Date(o.deadline)) : '不限');						o.priority = o.priority ? ' staron' : '';						o.titlemark = o.state ? '标识为未完成' : '标识为已完成';						return o;					})));					self.$ulList.find('div.cut_off_date input').datepicker($.getDPOptions({						minDate: 0,						onSelect: function(dateText, inst){							inst.input.val('截止日期  ' + dateText);							self.post('/todo/updateDeadline.do', {								noteId: parseInt(inst.input.parents('li').attr('noteid')),								deadlinestr: dateText							}, function(result){								self.sort();							}, '更新待办截止日期');						}					}));				} else {					self.todoEmpty();				}			}, '获取待办列表数据');		},		post: function(url, data, success, errorText){			if (!$.loading.is()) {				$.loading();				$.ajax({					url: url,					type: 'post',					dataType: 'json',					data: data,					success: function(data){						$.loading.close();						$.isFunction(success) && success(data);					},					error: function(xhr, textStatus, errorThrown){						$.loading.close();						$.alert(errorText + '时出现错误:' + textStatus + ':' + errorThrown);					}				});			}		},		sort: function(){			this.$ulList.append(this.$ulList.find('li').toArray().sort(sortOperator));		},		todoEmpty: function(){			this.$ulList.empty().html('<li class="todo_empty">好记性不如烂笔头，有什么待办的事，就记下来吧！</li>');		}	});		function sortOperator(a, b){		if (a.nodeName) {			a = getSortOperatorParam($(a));			b = getSortOperatorParam($(b));		}		return a.state - b.state || b.priority - a.priority || (a.deadline || Number.MAX_VALUE) - (b.deadline || Number.MAX_VALUE) || b.id - a.id;	}	function getSortOperatorParam($elem, t){		return {			state: $elem.hasClass('com'),			priority: $elem.find('a.star').hasClass('staron'),			deadline: (t = $elem.find('div.cut_off_date input').val().split('  ')[1]) && /^\d{4}-\d{2}-\d{2}$/.test(t) ? +new Date(t.split('-').join('/')) : 0,			id: +$elem.attr('noteid')		};	}})