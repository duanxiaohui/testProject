(function() {    var rRoute, rFormat;    $.route = function(obj, path) {        obj = obj || {};        var m;        (rRoute || (rRoute = /([\d\w_]+)/g)).lastIndex = 0;        while ((m = rRoute.exec(path)) !== null) {            obj = obj[m[0]];            if (obj == undefined) {                break            }        }        return obj    };    $.format = function() {        var args = $.makeArray(arguments),            str = String(args.shift() || ""),            ar = [],            first = args[0];        args = $.isArray(first) ? first : typeof(first) == 'object' ? args : [args];        $.each(args, function(i, o) {            ar.push(str.replace(rFormat || (rFormat = /\{([\d\w\.]+)\}/g), function(m, n, v) {                v = n === 'INDEX' ? i : n.indexOf(".") < 0 ? o[n] : $.route(o, n);                return v === undefined ? m : ($.isFunction(v) ? v.call(o, n) : v)            }));        });        return ar.join('');    };    var rPad;    $.padWithZero = function(str) {        return str.replace((rPad || (rPad = /(^|\D)(\d)(?=$|\D)/g)), '$10$2');    };})();/** * 放假安排数据 * @return {null} * { * 	2013: { * 		festival : {}, * 		workday: {} * 	}, * 	2014: { * 		festival : {}, * 		workday: {} * 	} * } */ var festivalAndWorkDay = {};(function () {	var festival, workday;	//2013	festivalAndWorkDay['2013'] = {};    festival = festivalAndWorkDay['2013'].festival = {};    workday = festivalAndWorkDay['2013'].workday = {};    $.each('m1d1 m1d2 m1d3 m2d9 m2d10 m2d11 m2d12 m2d13 m2d14 m2d15 m4d4 m4d5 m4d6 m4d29 m4d30 m5d1 m6d10 m6d11 m6d12 m9d19 m9d20 m9d21 m10d1 m10d2 m10d3 m10d4 m10d5 m10d6 m10d7'.split(' '), function(_, key) {        festival[key] = 'rest';    });    $.each('m1d5 m1d6 m2d16 m2d17 m4d7 m4d27 m4d28 m6d8 m6d9 m9d22 m9d29 m10d12'.split(' '), function(_, key) {        workday[key] = 'work';    });    //2014    festivalAndWorkDay['2014'] = {};    festival = festivalAndWorkDay['2014'].festival = {};	workday = festivalAndWorkDay['2014'].workday = {};    $.each('m1d1 m1d31 m2d1 m2d2 m2d3 m2d4 m2d5 m2d6 m4d5 m4d6 m4d7 m5d1 m5d2 m5d3 m5d31 m6d1 m6d2 m9d6 m9d7 m9d8 m10d1 m10d2 m10d3 m10d4 m10d5 m10d6 m10d7'.split(' '), function(_, key) {        festival[key] = 'rest';    });    $.each('m1d26 m2d8 m5d4 m9d28 m10d11'.split(' '), function(_, key) {        workday[key] = 'work';    });    //2015年放假安排    festivalAndWorkDay['2015'] = {};    festival = festivalAndWorkDay['2015'].festival = {};    workday = festivalAndWorkDay['2015'].workday = {};    $.each('m1d1 m1d2 m1d3 m2d18 m2d19 m2d20 m2d21 m2d22 m2d23 m2d24 m4d4 m4d5 m4d6 m5d1 m5d2 m5d3 m6d20 m6d21 m6d22 m9d26 m9d27 m9d3 m9d4 m9d5 m10d1 m10d2 m10d3 m10d4 m10d5 m10d6 m10d7'.split(' '), function(_, key){        festival[key] = 'rest';    });        $.each('m1d4 m2d15 m2d28 m9d6 m10d10'.split(' '), function(_, key){        workday[key] = 'work';    });})();function Calendar(date) {    this.date = date ? new Date(+date) : (G.currDate || new Date);}Calendar.prototype = {    getMonthFirstDate: function() {        var date = new Date(+this.date);        date.setDate(1);        return date;    },    getCalendarFirstDate: function(isSundayFirst) {        var date = this.getMonthFirstDate(),            day = date.getDay();        date.setDate(date.getDate() - (isSundayFirst ? day : day == 0 ? 6 : (day - 1)));        return date;    }};$.widget('meixx.webCalendar', {    options: {        defDate: new Date(),        onselect: $.noop    },    _create: function() {        var self = this,            $elem = $(this.element),            opt = this.options;        var now = this.today = opt.defDate,            year = now.getFullYear(),            month = now.getMonth() + 1;        this.panel = $elem.find('ul.js-cld-panel');        this.tmplDate = '<li class="{monthClass}" date="{date}"><div class="grid"><div class="vacation_icon"></div><div class="solar_data">{solar}</div><div class="lunar_data">{lunar}</div></div></li>';        this.initCalendar(year, month);        this.initPrevCalendar(year, month - 1);        this.initNextCalendar(year, month + 1);        this.setPosition();        opt.onselect.call(self, now, lunar(now));        this.handleClick();        this.initDatePicker();        self.selectdate();    },    setPosition: function() {        var w = $(window).width();        var has3d = 'WebKitCSSMatrix' in window && 'm11' in new WebKitCSSMatrix();        $('.js-cld-panel_prev').css({            '-webkit-transform': has3d ? "translate3d(-" + w + "px,0,0)" : "translate(-" + w + "px,0)"        });        $('.js-cld-panel').css({            '-webkit-transform': has3d ? "translate3d(0px,0,0)" : "translate(0px,0)"        });        $('.js-cld-panel_next').css({            '-webkit-transform': has3d ? "translate3d(" + w + "px,0,0)" : "translate(" + w + "px,0)"        });        var self = this;        window.slideObject = {            bindSlide: self.bindSlide,            startFun: self.startFun,            moveFun: self.moveFun,            endFun: self.endFun,            status:''        };        this.bindSlide();    },    bindSlide: function() {        var prev = $('.js-cld-panel_prev')[0];        var now = $('.js-cld-panel')[0];        var next = $('.js-cld-panel_next')[0];        prev.removeEventListener('touchstart', slideObject.startFun);        prev.removeEventListener('touchmove', slideObject.moveFun);        prev.removeEventListener('touchend', slideObject.endFun);        now.removeEventListener('touchstart', slideObject.startFun);        now.removeEventListener('touchmove', slideObject.moveFun);        now.removeEventListener('touchend', slideObject.endFun);        next.removeEventListener('touchstart', slideObject.startFun);        next.removeEventListener('touchmove', slideObject.moveFun);        next.removeEventListener('touchend', slideObject.endFun);        now.addEventListener('touchstart', slideObject.startFun, false);    },    startFun: function(event) {        var touch = event.targetTouches[0];        window.isScrolling = 0;        window.startPos = {            x: touch.pageX,            y: touch.pageY,            time: +new Date        };        window.endPos = {            x: 0,            y: 0        };        this.addEventListener('touchmove', slideObject.moveFun, false);        this.addEventListener('touchend', slideObject.endFun, false);    },    moveFun: function(event) {        if (event.targetTouches.length > 1 || event.scale && event.scale !== 1) return;        var touch = event.targetTouches[0];        endPos = {            x: touch.pageX - startPos.x,            y: touch.pageY - startPos.y        };        isScrolling = Math.abs(endPos.x) < Math.abs(endPos.y) ? 1 : 0;        if (isScrolling === 0) {            event.preventDefault();        }    },    endFun: function(event) {        this.removeEventListener('touchmove', slideObject.startFun, false);        this.removeEventListener('touchmove', slideObject.moveFun, false);        this.removeEventListener('touchend', slideObject.endFun, false);        var duration = +new Date - startPos.time;        if (isScrolling === 0) {            if (Number(duration) > 10) {　　　                var has3d = 'WebKitCSSMatrix' in window && 'm11' in new WebKitCSSMatrix();                var w = $(window).width();                var prev = $('.js-cld-panel_prev');                var now = $('.js-cld-panel');                var next = $('.js-cld-panel_next');                if (endPos.x > 10) {                    var sp_year = prev[0].getAttribute('data-year'),                        sp_month = prev[0].getAttribute('data-month');                    $('#sp_year').html(sp_year);                    $('#sp_month').html(sp_month);                    //设置年份月份select跟随左右滑动切换                    $("#sp_year_select option[value='"+sp_year+"']").attr("selected", "selected");                    $("#sp_month_select option[value='"+sp_month+"']").attr("selected", "selected");                    //向右滑动                                        prev.css({                        '-webkit-transform': has3d ? "translate3d(0px,0,0)" : "translate(0px,0)",                        '-webkit-transition': '200ms linear'                    }).removeClass('js-cld-panel_prev').addClass('js-cld-panel');                    now.css({                        '-webkit-transform': has3d ? "translate3d(" + w + "px,0,0)" : "translate(" + w + "px,0)",                        '-webkit-transition': '200ms linear'                    }).removeClass('js-cld-panel').addClass('js-cld-panel_next');                    next.removeClass('js-cld-panel_next').addClass('js-cld-panel_prev');                    (function(){                        $('.calendar_grid')[0].insertBefore(this, prev[0]);                        $(this).css({                            '-webkit-transform': has3d ? "translate3d(" + -w + "px,0,0)" : "translate(" + -w + "px,0)"                        });                        var year = this.getAttribute('data-year'),                            month = this.getAttribute('data-month');                        var date = new Date(year, month - 1, 1);                        date.setMonth(date.getMonth() - 3);                        $('#bd').webCalendar('initPrevCalendar', date.getFullYear(), date.getMonth() + 1);                        $('#bd').webCalendar('reloadPanel');                                            slideObject.bindSlide();                    }).call(next[0]);                } else if (endPos.x < -10) {                    var sn_year = next[0].getAttribute('data-year'),                        sn_month = next[0].getAttribute('data-month');                    $('#sp_year').html(sn_year);                    $('#sp_month').html(sn_month);                    //设置年份月份select跟随左右滑动切换                    $("#sp_year_select option[value='"+sn_year+"']").attr("selected", "selected");                    $("#sp_month_select option[value='"+sn_month+"']").attr("selected", "selected");                    prev.removeClass('js-cld-panel_prev').addClass('js-cld-panel_next');                    (function(){                        $(this).appendTo('.calendar_grid');                        $(this).css({                            '-webkit-transform': has3d ? "translate3d(" + w + "px,0,0)" : "translate(" + w + "px,0)"                        });                        var year = this.getAttribute('data-year'),                            month = this.getAttribute('data-month');                        var date = new Date(year, month - 1, 1);                        date.setMonth(date.getMonth() + 3);                        setTimeout(function () {                            $('#bd').webCalendar('initNextCalendar', date.getFullYear(), date.getMonth() + 1);                            $('#bd').webCalendar('reloadPanel');                                                        slideObject.bindSlide();                        }, 16)                    }).call(prev[0]);                    //向左滑动                    now.css({                        '-webkit-transform': has3d ? "translate3d(-" + w + "px,0,0)" : "translate(-" + w + "px,0)",                        '-webkit-transition': '200ms linear'                    }).removeClass('js-cld-panel').addClass('js-cld-panel_prev');                    next.css({                        '-webkit-transform': has3d ? "translate3d(0px,0,0)" : "translate(0px,0)",                        '-webkit-transition': '200ms linear'                    }).removeClass('js-cld-panel_next').addClass('js-cld-panel');                }            }            else{                slideObject.bindSlide();            }        }        else{            slideObject.bindSlide();        }    },    initCalendar: function(year, month, vocFrom, vocTo, data ,festivalIcon) {        var self = this,            $elem = $(this.element),            opt = this.options;        var d = new Date(year, month - 1, 1),            c = new Calendar(d),            firstDay = c.getCalendarFirstDate(),            t = this.today,            day;        if (vocFrom) {            vocFrom = new Date(vocFrom);            vocTo = new Date(vocTo);            if (vocFrom < firstDay) {                firstDay = new Date(vocFrom);                day = firstDay.getDay()                firstDay.setDate(firstDay.getDate() - (day == 0 ? 6 : (day - 1)));            }        }        this.year = d.getFullYear();        this.month = d.getMonth() + 1;        $('#sp_year').html(this.year);        $('#sp_month').html(this.month);        $("#sp_year_select option[value='"+this.year+"']").attr("selected", "selected");        $("#sp_month_select option[value='"+this.month+"']").attr("selected", "selected");        var iterator = new Date(firstDay),            rowsHtml = $.map(new Array(42), function(_, i) {                var y = iterator.getFullYear(),                    m = iterator.getMonth(),                    d = iterator.getDate(),                    w = iterator.getDay(),                    l = lunar(iterator);                var selector = [],                    key = 'm' + (m + 1) + 'd' + d,                    festival = l.festival(),                    isVoc = false;                if(                	(function () {	                	for(var i in festivalAndWorkDay){	                		if(y == i){	                			return true	                		}	                	}	                	return false	                })()	            ){                	if (vocFrom) {	                    if (+iterator >= +vocFrom && +iterator <= +vocTo) {	                        festivalAndWorkDay[y]['festival'][key] && (isVoc = true) && selector.push(festivalAndWorkDay[y]['festival'][key], 'vacation');	                        festivalAndWorkDay[y]['workday'][key] && (isVoc = true) && selector.push(festivalAndWorkDay[y]['workday'][key]);	                    }	                    if (!isVoc) {	                        selector.push('befor');	                    }	                } else {	                    festivalAndWorkDay[y]['festival'][key] && selector.push(festivalAndWorkDay[y]['festival'][key], 'vacation');	                    festivalAndWorkDay[y]['workday'][key] && selector.push(festivalAndWorkDay[y]['workday'][key]);	                    data == d && m == month - 1 && selector.push('on');	                    m != month - 1 && selector.push('befor');	                    d == t.getDate() && m == t.getMonth() && y == t.getFullYear() && selector.push('today on');	                    (w == 0 || w == 6) && selector.push('weekend');	                    l.term ? selector.push('solar') : festival.length ? selector.push('isolar') : '';	                }                }				else {                    data == d && m == month - 1 && selector.push('on');                    m != month - 1 && selector.push('befor');                    d == t.getDate() && m == t.getMonth() && y == t.getFullYear() && selector.push('today on');                    (w == 0 || w == 6) && selector.push('weekend');                    l.term ? selector.push('solar') : festival.length ? selector.push('isolar') : '';                }                iterator.setDate(iterator.getDate() + 1);                return $.format(self.tmplDate, {                    monthClass: selector.join(' '),                    solar: d,                    lunar: festival[0] && festival[0].desc.length < 7 && festival[0].desc || l.term || l.dateIndex == 0 && (l.lMonth + '月' + (l.isBigMonth ? '大' : '小')) || l.lDate,                    date: [y, m + 1, d].join('/')                });            });        this.panel.css('opacity', 0.2).html(rowsHtml).fadeTo(200, 1).attr({            'data-year': d.getFullYear(),            'data-month': d.getMonth() + 1        });        data && self.festivalClick(this.panel.find("li.on"));        self.calculate();        festivalIcon||self.screenGrid($('.js-cld-panel'));    },    reloadPanel: function() {        this.panel = $('ul.js-cld-panel');    },    initPrevCalendar: function(year, month, vocFrom, vocTo, data) {        var self = this,            $elem = $(this.element),            opt = this.options;        var d = new Date(year, month - 1, 1),            c = new Calendar(d),            firstDay = c.getCalendarFirstDate(),            t = this.today,            day;        if (vocFrom) {            vocFrom = new Date(vocFrom);            vocTo = new Date(vocTo);            if (vocFrom < firstDay) {                firstDay = new Date(vocFrom);                day = firstDay.getDay()                firstDay.setDate(firstDay.getDate() - (day == 0 ? 6 : (day - 1)));            }        }        var iterator = new Date(firstDay),            rowsHtml = $.map(new Array(42), function(_, i) {                var y = iterator.getFullYear(),                    m = iterator.getMonth(),                    d = iterator.getDate(),                    w = iterator.getDay(),                    l = lunar(iterator);                var selector = [],                    key = 'm' + (m + 1) + 'd' + d,                    festival = l.festival(),                    isVoc = false;                if(                	(function () {	                	for(var i in festivalAndWorkDay){	                		if(y == i){	                			return true	                		}	                	}	                	return false	                })()	            ){                	if (vocFrom) {	                    if (+iterator >= +vocFrom && +iterator <= +vocTo) {	                        festivalAndWorkDay[y]['festival'][key] && (isVoc = true) && selector.push(festivalAndWorkDay[y]['festival'][key], 'vacation');	                        festivalAndWorkDay[y]['workday'][key] && (isVoc = true) && selector.push(festivalAndWorkDay[y]['workday'][key]);	                    }	                    if (!isVoc) {	                        selector.push('befor');	                    }	                } else {	                    festivalAndWorkDay[y]['festival'][key] && selector.push(festivalAndWorkDay[y]['festival'][key], 'vacation');	                    festivalAndWorkDay[y]['workday'][key] && selector.push(festivalAndWorkDay[y]['workday'][key]);	                    data == d && m == month - 1 && selector.push('on');	                    m != month - 1 && selector.push('befor');	                    d == t.getDate() && m == t.getMonth() && y == t.getFullYear() && selector.push('today on');	                    (w == 0 || w == 6) && selector.push('weekend');	                    l.term ? selector.push('solar') : festival.length ? selector.push('isolar') : '';	                }                }				else {                    data == d && m == month - 1 && selector.push('on');                    m != month - 1 && selector.push('befor');                    d == t.getDate() && m == t.getMonth() && y == t.getFullYear() && selector.push('today on');                    (w == 0 || w == 6) && selector.push('weekend');                    l.term ? selector.push('solar') : festival.length ? selector.push('isolar') : '';                }                iterator.setDate(iterator.getDate() + 1);                return $.format(self.tmplDate, {                    monthClass: selector.join(' '),                    solar: d,                    lunar: festival[0] && festival[0].desc.length < 7 && festival[0].desc || l.term || l.dateIndex == 0 && (l.lMonth + '月' + (l.isBigMonth ? '大' : '小')) || l.lDate,                    date: [y, m + 1, d].join('/')                });            });        $('.js-cld-panel_prev').css('opacity', 0.2).html(rowsHtml).fadeTo(200, 1).attr({            'data-year': d.getFullYear(),            'data-month': d.getMonth() + 1        });        // data && self.festivalClick($('.js-cld-panel_prev').find('li.on'));        self.calculate();        self.screenGrid($('.js-cld-panel_prev'));        window.checkPrevInitStatus = true;    },    initNextCalendar: function(year, month, vocFrom, vocTo, data) {        var self = this,            $elem = $(this.element),            opt = this.options;        var d = new Date(year, month - 1, 1),            c = new Calendar(d),            firstDay = c.getCalendarFirstDate(),            t = this.today,            day;        if (vocFrom) {            vocFrom = new Date(vocFrom);            vocTo = new Date(vocTo);            if (vocFrom < firstDay) {                firstDay = new Date(vocFrom);                day = firstDay.getDay()                firstDay.setDate(firstDay.getDate() - (day == 0 ? 6 : (day - 1)));            }        }        // this.year = d.getFullYear();        // this.month = d.getMonth() + 1;        // $('#sp_year').html(this.year);        // $('#sp_month').html(this.month);        // $("#sp_year_select option[value='"+this.year+"']").attr("selected", "selected");        // $("#sp_month_select option[value='"+this.month+"']").attr("selected", "selected");        var iterator = new Date(firstDay),            rowsHtml = $.map(new Array(42), function(_, i) {                var y = iterator.getFullYear(),                    m = iterator.getMonth(),                    d = iterator.getDate(),                    w = iterator.getDay(),                    l = lunar(iterator);                var selector = [],                    key = 'm' + (m + 1) + 'd' + d,                    festival = l.festival(),                    isVoc = false;                if(                	(function () {	                	for(var i in festivalAndWorkDay){	                		if(y == i){	                			return true	                		}	                	}	                	return false	                })()	            ){                	if (vocFrom) {	                    if (+iterator >= +vocFrom && +iterator <= +vocTo) {	                        festivalAndWorkDay[y]['festival'][key] && (isVoc = true) && selector.push(festivalAndWorkDay[y]['festival'][key], 'vacation');	                        festivalAndWorkDay[y]['workday'][key] && (isVoc = true) && selector.push(festivalAndWorkDay[y]['workday'][key]);	                    }	                    if (!isVoc) {	                        selector.push('befor');	                    }	                } else {	                    festivalAndWorkDay[y]['festival'][key] && selector.push(festivalAndWorkDay[y]['festival'][key], 'vacation');	                    festivalAndWorkDay[y]['workday'][key] && selector.push(festivalAndWorkDay[y]['workday'][key]);	                    data == d && m == month - 1 && selector.push('on');	                    m != month - 1 && selector.push('befor');	                    d == t.getDate() && m == t.getMonth() && y == t.getFullYear() && selector.push('today on');	                    (w == 0 || w == 6) && selector.push('weekend');	                    l.term ? selector.push('solar') : festival.length ? selector.push('isolar') : '';	                }                }				else {                    data == d && m == month - 1 && selector.push('on');                    m != month - 1 && selector.push('befor');                    d == t.getDate() && m == t.getMonth() && y == t.getFullYear() && selector.push('today on');                    (w == 0 || w == 6) && selector.push('weekend');                    l.term ? selector.push('solar') : festival.length ? selector.push('isolar') : '';                }                iterator.setDate(iterator.getDate() + 1);                return $.format(self.tmplDate, {                    monthClass: selector.join(' '),                    solar: d,                    lunar: festival[0] && festival[0].desc.length < 7 && festival[0].desc || l.term || l.dateIndex == 0 && (l.lMonth + '月' + (l.isBigMonth ? '大' : '小')) || l.lDate,                    date: [y, m + 1, d].join('/')                });            });        $('.js-cld-panel_next').css('opacity', 0.2).html(rowsHtml).fadeTo(200, 1).attr({            'data-year': d.getFullYear(),            'data-month': d.getMonth() + 1        });        // data && self.festivalClick($('.js-cld-panel_next').find('li.on'));        self.calculate();        self.screenGrid($('.js-cld-panel_next'));    },    selectdate: function() {        var self = this,            $elem = $(this.element),            opt = this.options;        var d = new Date(),            y = d.getFullYear(),            m = d.getMonth() + 1;        var yearHtml = " ";        for (var i = 1979; i < 2051; i++) {            yearHtml += '<option value="' + i + '">' + i + '</option>';        }        $("#sp_year_select").html(yearHtml);        var CaYear = $("#sp_year").html();        $("#sp_year_select option[value='"+CaYear+"']").attr("selected", "selected");                $("#sp_year_select").change(function() {            var yearVal = +$(this).children('option:selected').val();            var mVal = $("#sp_month_select").children('option:selected').val();            //上一年            var Pdate = new Date(yearVal, mVal - 2);            var Pyear = Pdate.getFullYear();            var Pmonth = Pdate.getMonth() + 1;            //当前年            var date = new Date(yearVal, mVal - 1);            var year = date.getFullYear();            var month = date.getMonth() + 1;            //下一年            var Ndate = new Date(yearVal, mVal);            var Nyear = Ndate.getFullYear();            var Nmonth = Ndate.getMonth() + 1;            self.initPrevCalendar(Pyear, Pmonth);            self.initCalendar(year, month);            self.initNextCalendar(Nyear, Nmonth);        });        var monthHtml = " ";        for (var i = 1; i < 13; i++) {            monthHtml += '<option value="' + i + '">' + i + '</option>';        }        $("#sp_month_select").html(monthHtml);        var CaMonth = $("#sp_month").html();        $("#sp_month_select option[value='"+CaMonth+"']").attr("selected", "selected");        $("#sp_month_select").change(function() {            var yearVal = $("#sp_year_select").children('option:selected').val();            var mVal = +$(this).children('option:selected').val();            //上一年            var Pdate = new Date(yearVal, mVal - 2);            var Pyear = Pdate.getFullYear();            var Pmonth = Pdate.getMonth() + 1;            //当前年            var date = new Date(yearVal, mVal - 1);            var year = date.getFullYear();            var month = date.getMonth() + 1;            //下一年            var Ndate = new Date(yearVal, mVal);            var Nyear = Ndate.getFullYear();            var Nmonth = Ndate.getMonth() + 1;            self.initPrevCalendar(Pyear, Pmonth);            self.initCalendar(year, month);            self.initNextCalendar(Nyear, Nmonth);        });    },    screenGrid: function(eul) {        var self = this,            $elem = $(this.element),            opt = this.options;        var $grid= $(".calendar_grid");        var $firstLi = eul.find("li:not(.befor):first");        var $lasttLi = eul.find("li:not(.befor):last");        var firstIndex = $firstLi.index();        var lastIndex = $lasttLi.index();        var num = firstIndex - 1;        var numt = lastIndex - 1;        var s = eul.find("li:lt(" + num + ")");        var t = eul.find("li:gt(" + numt + ")");        var rowNum;        if (firstIndex >= 7) {            s.hide();        }        if ((41 - lastIndex) >= 7) {            eul.find("li:gt(34)").hide();        }        var $li = eul.find("li:visible");        rowNum = $li.size()/7;        if(rowNum == 5){        	if($grid.height() < 355){        		eul.addClass("five");        	}else {        		eul.addClass("fives");        	}        	        }else if(rowNum == 4){        	if($grid.height() < 355){        		eul.addClass("four");        	}else {        		eul.addClass("fours");        	}        }else{            eul.removeClass("five");            eul.removeClass("fives");            eul.removeClass("four");            eul.removeClass("fours");        }    },    setCalendarDate: function(date) {        var self = this,            $elem = $(this.element),            opt = this.options;        var year = date.getFullYear();        var month = date.getMonth() + 1;        var date = date.getDate();        $('#sp_year').html(year);        $('#sp_month').html(month);        self.initCalendar(year, month, undefined, undefined, date);    },    handleClick: function() {        var self = this,            $elem = $(this.element),            opt = this.options;        $('li', self.panel).live('click', function() {            self.panel.find('li.on').removeClass('on');            self.panel.find('li.reston').removeClass('reston').addClass('rest');            self.panel.find('li.workon').removeClass('workon').addClass('work');            $('li', self.panel).removeClass('on liactive');            var $li = $(this).addClass('on liactive'),                strDate = $li.attr('date'),                d = new Date(strDate),                year = d.getFullYear(),                month = d.getMonth() + 1;            var sp_month = $elem.find("#sp_month").text();            if (month != sp_month) {                self.initPrevCalendar(year,month - 1);                self.initCalendar(year, month);                self.initNextCalendar(year,month + 1);                self.panel.find('li[date="' + strDate + '"]').addClass('on');                self.panel.find('li[date="' + strDate + '"]').click();            } else {                opt.onselect.call(self, d, lunar(d));            }            //zoom();        });    },    festivalClick: function($li) {        var self = this,            $elem = $(this.element),            opt = this.options;        var strDate = $li.attr('date'),            d = new Date(strDate);        opt.onselect.call(self, d, lunar(d));    },    initDatePicker: function() {        var self = this,            $elem = $(this.element),            opt = this.options;        $elem.find('a.today_btn').click(function(evt) {            evt.preventDefault();            var y =+self.today.getFullYear(), m = +self.today.getMonth();            self.initPrevCalendar(y, m);            self.initCalendar(y,m + 1);            self.initNextCalendar(y, m + 2);            self.panel.find('li.today').click();        });        //切换上下月        // $elem.find('div.select a.prev_btn,div.select a.next_btn').click(function(evt) {        //     evt.preventDefault();        //     var $lnk = $(this),        //         SpMonth = parseInt($('#sp_month').html()),        //         SpYear = parseInt($('#sp_year').html()),        //         delta = parseInt($lnk.attr('delta') - 0);        //         //当前月        //         var swdate = new Date(SpYear, SpMonth + delta),        //             swYear = swdate.getFullYear();        //             swMonth = swdate.getMonth() ;        //         //上一月        //         var spdate = new Date(SpYear, SpMonth + delta - 1),        //             spdYear = spdate.getFullYear();        //             spdMonth = spdate.getMonth();        //         //下一月        //         var sndate = new Date(SpYear, SpMonth + delta + 1),        //             snYear = sndate.getFullYear();        //             snMonth = sndate.getMonth();        //         self.initPrevCalendar(spdYear , spdMonth)        //         self.initCalendar(swYear, swMonth);        //         self.initNextCalendar(snYear , snMonth)        // });    },     getYear: function() {        return this.year;    },    getMonth: function() {        return this.month;    },    getPanel: function() {        return this.panel;    },    calculate: function() {        var $h = $(window).height();        var $calendar_grid = $(".calendar_grid");        var $grid_li = $(".calendar_grid_list").find("li");        var $grid = $(".grid");        var $solar_data = $(".solar_data");        var $lunar_data = $(".lunar_data")        var grid_li_w = $grid_li.width();        var posh = $(".calendar_position");        if ($h > 557) {            var solar_view_h = $h - posh.height();            $(".solar_view").height(solar_view_h);            $(".today .grid").width("51px").height("51px");            posh.css({                "position": "absolute"            });            $calendar_grid.height(355);            if (grid_li_w < 54) {                 $calendar_grid.height(301);            }else if(grid_li_w>54){                $grid.width(54);                $grid.height(54);            }        } else {            $calendar_grid.height(301);            posh.css({                "position": "static"            });        }        //宽度小于54的表示屏幕宽度为320        if (grid_li_w < 54) {            //设置日历格子高度和宽度一致            $grid_li.height(grid_li_w);            $grid.height(grid_li_w - 2).width(grid_li_w - 2);            var grid_h = $grid_li.height();            $calendar_grid.height(grid_h*6 + 25);            var sldata_h = (grid_li_w - 4) / 2;            $lunar_data.css({                "height": sldata_h,                "line-height": sldata_h - 8 + "px"            });            $solar_data.css({                "height": sldata_h,                "line-height": sldata_h + "px",                "font-size": "18px",                "padding-top": "5px"            });        }    }});$.widget('meixx.dayDetail', {    options: {},    _create: function() {        var self = this,            $elem = $(this.element),            opt = this.options;        this.tmpl = '<div class="today_solar e_clear">\	    		<div class="today_solar_txt">\	    			{month}月{date}日\	    		</div>\	    		<div class="today_lunar_txt">\	    			<p class="today_lunar">{lmonth}月{ldate}</p>\	    			<p class="today_week_txt">{week}</p>\	    		</div>\	    	</div>\	    	<div class="holiday_txt">\	    		{term}\	    	</div>\	    	<div class="hl">\	    		<div class="yi"></div>\	    		<div class="ji"></div>\	    	</div>';    },    init: function(date, l) {        var self = this,            $elem = $(this.element),            opt = this.options;        var y = date.getFullYear(),            m = date.getMonth() + 1,            d = date.getDate(),            now = new Date();        $elem.html($.format(this.tmpl, {            year: y,            month: m,            term: function() {                var s = [];                var o = l.festival();                for (var i = 0; i < o.length; i++) {                    s.push('<div class="holiday_icon">' + o[i].desc + '</div>');                };                l.term && s.push('<div class="holiday_icon">' + l.term + '</div>');                return s.join('');            },            padmonth: ('0' + m).slice(-2),            paddate: ('0' + d).slice(-2),            date: d,            week: '星期' + l.cnDay,            animal: l.animal,            istoday: now.getDate() == d && now.getMonth() == date.getMonth() && now.getFullYear() == y ? '<div class="today_icon"></div>' : '',            lmonth: l.lMonth,            ldate: l.lDate,            gzyear: l.gzYear,            gzmonth: l.gzMonth,            gzdate: l.gzDate        }));        this.loadLuckyData(y, m, d);    },    loadLuckyData: function(y, m, d) {        var self = this,            $elem = $(this.element),            opt = this.options;        var strDate = 'd' + ('0' + m).slice(-2) + ('0' + d).slice(-2);        if (window.HuangLi && HuangLi['y' + y]) {            this.fillLuckyData(HuangLi['y' + y][strDate]);        } else if (y > 2007 && y < 2021) {            $.getScript('http://baidu365.duapp.com/wannianlibaidu/js/huangli/hl' + y + '.js', function() {                self.fillLuckyData(HuangLi['y' + y][strDate]);            });        } else {            this.fillLuckyData({                'y': '',                'j': ''            });        }    },    fillLuckyData: function(data) {        var self = this,            $elem = $(this.element),            opt = this.options;        var y = data.y.replace(/^\.|\.$/g, '').split('.'),            j = data.j.replace(/^\.|\.$/g, '').split('.');        if(y==""||j==""){            $elem.find("div.hl").hide();        }        $elem.find('div.yi').html(dealString(y)).attr('title', y.join(' '));        $elem.find('div.ji').html(dealString(j)).attr('title', j.join(' '));    }});function dealString(ar) {    ar = ar.sort(function(a, b) {        return a.length - b.length;    });    var arRslt = [],        t;    $.each(ar, function(i, s) {        arRslt.push(s);    });    return arRslt.slice(0, 5).join('.');}$.widget('zmc.vacationLayer', {    options: {},    _create: function() {        var self = this,            $elem = $(this.element),            opt = this.options;        $elem.append(opt.tmplHead + $.format(opt.tmplBody, opt.data) + opt.tmplTail);        $elem.click(function(evt) {            evt.preventDefault();            evt.stopPropagation();            var $tip = $('div.vac_solar_layer', this),                isVisible = $tip.is(':visible');            $('#div_buttons div.vac_solar_layer').not($tip).hide().parent().removeClass('on');            $tip[isVisible ? 'hide' : 'show']('fade').parent()[isVisible ? 'removeClass' : 'addClass']('on');            var $w = $(window).width();            $('.vac_solar_layer').width($w - 6);            var vw = $w - 66;            var sw = $w - 30;            $('.vac_layer').css({                "margin-left": -vw + 'px'            });            $('.solar_layer').css({                "margin-left": -sw + 'px'            });        });        $elem.find('li').click(function(evt) {            evt.stopPropagation();            var $li = $(this),                year = opt.type == 'v' ? 2015 : ($('#bd').webCalendar('getYear') - ($('#bd').webCalendar('getMonth') == 1 ? 1 : 0)),                idx = $li.attr('idx') - 0;            var month = opt.type == 'v' ? $li.attr('month') - 0 : Math.ceil((idx + 1) / 2) + 1;            var date = new Date(year, month - 1);            year = date.getFullYear();            month = date.getMonth() + 1;            $elem.find('div.vac_solar_layer').hide();            $elem.removeClass("on");            if (opt.type == 's') {                 //上一年                var sPdate = new Date(year, month - 2);                var sPyear = sPdate.getFullYear();                var sPmonth = sPdate.getMonth() + 1;                 //下一年                var sNdate = new Date(year, month);                var sNyear = sNdate.getFullYear();                var sNmonth = sNdate.getMonth() + 1;                $('#bd').webCalendar('initPrevCalendar',sPyear, sPmonth,undefined,undefined,undefined,true);                $('#bd').webCalendar('initCalendar', year, month);                $('#bd').webCalendar('initNextCalendar', sNyear, sNmonth);                $('#bd').webCalendar('getPanel').find('li:not(.befor).solar:' + (idx % 2 ? 'last' : 'first')).addClass('on').click();            } else if (opt.type == 'v') {                if($li.attr('month') == '{month}'){                    return false;                }                $('#bd').webCalendar('initCalendar', year, month, '2015' + $li.attr('from'), '2015' + $li.attr('to'),undefined,true);                                $('#bd').webCalendar('initNextCalendar',year, month+1);                //上一年                var Pdate = new Date(year, month - 2);                var Pyear = Pdate.getFullYear();                var Pmonth = Pdate.getMonth() + 1;                $('#bd').webCalendar('initPrevCalendar',Pyear, Pmonth);                 // $(".vacation_exp").html($li.attr('exp'));            }        });        $("body").click(function(evt) {            evt.stopPropagation();            var $tip = $('div.vac_solar_layer', this),                isVisible = $tip.is(':visible');            $(".vacation_exp").text('');            if (isVisible) {                $tip.hide('fade');                $("#div_buttons a").removeClass("on");            }        });        if (opt.bdParam.slice(0, 4) != 'rili') {            if (opt.bdParam == "jieqi") {                opt.type == 's' && $elem.click();            }            if (opt.bdParam == "jiaqi") {                opt.type == 'v' && $elem.click();            }            var reg = /^([1-2]\d{3})[\/|\-](0?[1-9]|10|11|12)[\/|\-]([1-2]?[0-9]|0[1-9]|30|31)$/;            ac = reg.test(opt.bdParam);            if (ac) {                var dateArry = opt.bdParam.split("-");                var year = dateArry[0],                    month = parseInt(dateArry[1], 10),                    date = parseInt(dateArry[2], 10);                var d = new Date();                d.setFullYear(year);                d.setMonth(month - 1);                d.setDate(date);                $('#bd').webCalendar("setCalendarDate", d);            } else {                $elem.find('div.vac_solar_layer li[pinyin="' + opt.bdParam + '"]').click();            }        }    }});(function() {    var queryJson, str;    $.query = function(name) {        if (!queryJson) {            queryJson = {};            if (str = location.search.slice(1) + '&' + location.hash.slice(1)) {                $.each(str.split('&'), function(i, s, key, value) {                    s = s.split('='), key = s[0], value = s[1];                    if (key in queryJson) {                        if ($.isArray(queryJson[key])) {                            queryJson[key].push(value);                        } else {                            queryJson[key] = [queryJson[key], value];                        }                    } else {                        queryJson[key] = value;                    }                });            }        }        return queryJson[name];    };})();$(function() {    var $detail = $('#div_day_detail'),        bdParam = ($.query('bd_param') || '').toLowerCase();    $detail.dayDetail();    $('#bd').webCalendar({        defDate: bdParam.slice(0, 4) == 'rili' && bdParam.indexOf("_") > -1 ? new Date(bdParam.split('_')[1], 0, 1) : void(0),        onselect: function(d, l) {            $detail.dayDetail('init', d, l);        }    });    /*        footer点击事件     */    var sUserAgent = navigator.userAgent.toLowerCase();    var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";     var bIsIphoneOs = sUserAgent.match(/iphone os/i) == "iphone os";    var bIsAndroid = sUserAgent.match(/android/i) == "android";    $(".footer").on('click',function(){        if(bIsIphoneOs || bIsIpad){            window.location="http://itunes.apple.com/cn/app/365ri-li-xin-ban/id642101382?ls=1&mt=8"        }else{            window.location="http://d2.365rili.com/coco.apk"        }    });    $('#div_buttons a.operate_vacation').vacationLayer({        type: 'v',        bdParam: bdParam,        tmplHead: '<div class="vac_solar_layer vac_layer none"><div class="arror_top"></div><h3>2015年公休放假安排</h3><ul class="e_clear">',        tmplTail: '</ul></div>',        tmplBody: '<li month="{month}" from="{from}" to="{to}" exp="{exp}" pinyin="{py}"><p class="name">{name}</p><p class="time">{time}</p></li>',        data: [{            name: '元旦',            time: '1月1日~1月3日',            month: 1,            py: 'yuandan',            exp: '1月1日放假。',            from: '/1/1',            to: '/1/3'        }, {            name: '春节',            time: '2月18日~2月24日',            month: 2,            py: 'chunjie',            exp: '2月18日~2月24日放假，2月15日(周日)、2月28日(周六)上班。',            from: '/2/18',            to: '/2/24'        }, {            name: '清明节',            time: '4月4日~4月6日',            month: 4,            py: 'qingmingjie',            exp: '4月4日~6日放假。',            from: '/4/4',            to: '/4/6'        }, {            name: '劳动节',            time: '5月1日~5月3日',            month: 5,            py: 'laodong',            exp: '5月1日~5月3日放假。',            from: '/5/1',            to: '/5/3'        }, {            name: '端午节',            time: '6月20日~6月22日',            month: 6,            py: 'duanwu',            exp: '6月20日~6月22日放假。',            from: '/6/20',            to: '/6/22'        }, {            name: '中秋节',            time: '9月26日~9月27日',            month: 9,            py: 'zhongqiu',            exp: '9月27日放假。',            from: '/9/26',            to: '/9/27'        }, {            name: '国庆节',            time: '10月1日~10月7日',            month: 10,            py: 'guoqing',            exp: '10月1日~7日放假，10月10日上班。',            from: '/10/1',            to: '/10/7'        }, {        }]    });    $("#div_buttons a.solar_terms").vacationLayer({        type: 's',        bdParam: bdParam,        tmplHead: '<div class="vac_solar_layer solar_layer none"><div class="arror_top"></div><h3>中国农历·二十四节气</h3><ul class="e_clear">',        tmplTail: '</ul></div>',        tmplBody: '<li idx="{INDEX}" pinyin="{py}"><p>{name}</p></li>',        data: [{            name: '立春',            py: 'lichun'        }, {            name: '雨水',            py: 'yushui'        }, {            name: '惊蛰',            py: 'jingzhe'        }, {            name: '春分',            py: 'chunfen'        }, {            name: '清明',            py: 'qingming'        }, {            name: '谷雨',            py: 'guyu'        }, {            name: '立夏',            py: 'lixia'        }, {            name: '小满',            py: 'xiaoman'        }, {            name: '芒种',            py: 'mangzhong'        }, {            name: '夏至',            py: 'xiazhi'        }, {            name: '小暑',            py: 'xiaoshu'        }, {            name: '大暑',            py: 'dashu'        }, {            name: '立秋',            py: 'liqiu'        }, {            name: '处暑',            py: 'chushu'        }, {            name: '白露',            py: 'bailu'        }, {            name: '秋分',            py: 'qiufen'        }, {            name: '寒露',            py: 'hanlu'        }, {            name: '霜降',            py: 'shuangjiang'        }, {            name: '立冬',            py: 'lidong'        }, {            name: '小雪',            py: 'xiaoxue'        }, {            name: '大雪',            py: 'daxue'        }, {            name: '冬至',            py: 'dongzhi'        }, {            name: '小寒',            py: 'xiaohan'        }, {            name: '大寒',            py: 'dahan'        }]    });});